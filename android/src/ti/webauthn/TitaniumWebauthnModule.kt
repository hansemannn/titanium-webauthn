/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package ti.webauthn

import android.app.PendingIntent
import android.content.Intent
import android.os.Build
import androidx.annotation.RequiresApi
import androidx.core.app.ActivityCompat.startIntentSenderForResult
import com.google.android.gms.fido.Fido
import com.google.android.gms.fido.fido2.Fido2ApiClient
import com.google.android.gms.fido.fido2.api.common.Attachment
import com.google.android.gms.fido.fido2.api.common.AuthenticatorSelectionCriteria
import com.google.android.gms.fido.fido2.api.common.EC2Algorithm
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialCreationOptions
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialDescriptor
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialParameters
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRequestOptions
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRpEntity
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialType
import com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialUserEntity
import com.google.android.gms.fido.fido2.api.common.ResidentKeyRequirement
import com.google.android.gms.fido.fido2.api.common.UserVerificationRequirement
import com.google.android.gms.tasks.Task
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.titanium.TiApplication
import java.util.Base64

@Kroll.module(name = "TitaniumWebauthn", id = "ti.webauthn")
class TitaniumWebauthnModule: KrollModule() {

	private lateinit var fido2ApiClient: Fido2ApiClient

	@RequiresApi(Build.VERSION_CODES.O)
	@Kroll.method
	fun register(params: KrollDict) {
		fido2ApiClient = Fido.getFido2ApiClient(TiApplication.getInstance().currentActivity)

		val publicKeyCredentialCreationOptions = PublicKeyCredentialCreationOptions.Builder()
			.setRp(PublicKeyCredentialRpEntity(params.getString("relyingParty"), getAppName(), null))
			.setUser(PublicKeyCredentialUserEntity(params.getString("userId").toByteArray(), params.getString("userId"), null, params.getString("userName")))
			.setChallenge(Base64.getDecoder().decode(params.getString("challenge")))
			.setParameters(listOf(PublicKeyCredentialParameters(PublicKeyCredentialType.PUBLIC_KEY.toString(), EC2Algorithm.ES256.algoValue)))
			.setAuthenticatorSelection(AuthenticatorSelectionCriteria.Builder().setAttachment(Attachment.PLATFORM).setRequireResidentKey(false).build())
			.setTimeoutSeconds(60.0)
			.build()

		val fido2PendingIntentTask: Task<PendingIntent> = fido2ApiClient.getRegisterPendingIntent(publicKeyCredentialCreationOptions)

		// TODO: Handle result via intent helper
		//
		//		val fido2Response = Fido2Intent.getFido2Response(data)
		//		if (fido2Response.errorCode == null) {
		//			val credential = fido2Response.getAuthenticatorAttestationResponse()
		//			// Send the credential to your server for validation and storage
		//		} else {
		//			// Handle error
		//		}
		fido2PendingIntentTask.addOnSuccessListener { pendingIntent ->
			TiApplication.getInstance().currentActivity.startIntentSenderForResult(pendingIntent.intentSender, 1001, null, 0, 0, 0, null)
		}
	}
	
	@RequiresApi(Build.VERSION_CODES.O)
	@Kroll.method
	fun login(params: KrollDict) {
		val publicKeyCredentialRequestOptions = PublicKeyCredentialRequestOptions.Builder()
			.setChallenge(Base64.getDecoder().decode(params.getString("challenge")))
			.setRpId(params.getString("relyingParty"))
			.setAllowList(listOf(PublicKeyCredentialDescriptor(PublicKeyCredentialType.PUBLIC_KEY.toString(), Base64.getDecoder().decode(params.getString("credential")), null)))
			.setTimeoutSeconds(60.0)
			.build()

		val fido2PendingIntentTask: Task<PendingIntent> = fido2ApiClient.getSignPendingIntent(publicKeyCredentialRequestOptions)

		// TODO: Handle result via intent helper
		//
		//		val fido2Response = Fido2Intent.getFido2Response(data)
		//		if (fido2Response.errorCode == null) {
		//			val credential = fido2Response.getAuthenticatorAssertionResponse()
		//			// Send the credential to your server for validation and verification
		//		} else {
		//			// Handle error
		//		}
		fido2PendingIntentTask.addOnSuccessListener { pendingIntent ->
			TiApplication.getInstance().currentActivity.startIntentSenderForResult(pendingIntent.intentSender, 1001, null, 0, 0, 0, null)
		}
	}

	private fun getAppName(): String {
		val applicationInfo = TiApplication.getInstance().packageManager.getApplicationInfo(TiApplication.getInstance().packageName, 0)
		return TiApplication.getInstance().packageManager.getApplicationLabel(applicationInfo).toString()
	}
}
